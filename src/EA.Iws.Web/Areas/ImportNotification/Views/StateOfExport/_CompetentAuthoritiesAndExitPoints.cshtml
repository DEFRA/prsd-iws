@model EA.Iws.Web.Areas.ImportNotification.ViewModels.StateOfExport.StateOfExportViewModel

<div class="form-group @Html.Gds().FormGroupClass(m => m.CompetentAuthorityId)">
    @for (int i = 0; i < Model.CompetentAuthorities.Count; i++)
    {
        @Html.HiddenFor(m => m.CompetentAuthorities[i].Id)
        @Html.HiddenFor(m => m.CompetentAuthorities[i].Code)
        @Html.HiddenFor(m => m.CompetentAuthorities[i].Name)
    }
    @Html.Gds().LabelFor(m => m.CompetentAuthorityId, false)
    @Html.Gds().ValidationMessageFor(m => m.CompetentAuthorityId)
    <fieldset>
        @for (int i = 0; i < Model.CompetentAuthorities.Count; i++)
        {
            var label = Model.CompetentAuthorities[i].Code + " - " + Model.CompetentAuthorities[i].Name;
            MvcHtmlString nameForThisValue = Html.NameFor(m => m.CompetentAuthorities[i].Id);

            <div class="form-group form-group-compound">
                <div class="multiple-choice">
                    @Html.RadioButtonFor(m => m.CompetentAuthorityId, Model.CompetentAuthorities[i].Id, htmlAttributes: new { id = nameForThisValue })
                    <label for="@nameForThisValue">
                        @label
                    </label>
                </div>
            </div>
        }
    </fieldset>
</div>

<div class="form-group @Html.Gds().FormGroupClass(m => m.ExitPointId)">
    @for (int i = 0; i < Model.ExitPoints.Count; i++)
    {
        @Html.HiddenFor(m => m.ExitPoints[i].Id)
        @Html.HiddenFor(m => m.ExitPoints[i].Name)
    }
    @Html.Gds().LabelFor(m => m.ExitPointId, false)
    @Html.Gds().ValidationMessageFor(m => m.ExitPointId)
    @Html.Gds().DropDownListFor(m => m.ExitPointId, Model.ExitPointList, string.Empty)
</div>
