@using EA.Iws.Core.Shared
@model EA.Iws.Web.Areas.NotificationApplication.ViewModels.Facility.SiteOfTreatmentViewModel
@{
    ViewBag.Title = "Site Of Treatment";
}

<h1 class="heading-large">Where will the waste be finally @(Model.NotificationType == NotificationType.Recovery ? "recovered?" : "disposed?")</h1>

@if (Model.Facilities.Any())
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.Gds().ValidationSummary()
        @Html.HiddenFor(m => m.NotificationId)
        @Html.HiddenFor(m => m.NotificationType)

        <div class="form-group @Html.Gds().FormGroupClass(m => m.SelectedSiteOfTreatment)">
            <table title="List of facilities for actual site of treatment">
                <thead>
                    <tr>
                        <th>Organisation name</th>
                        <th>Address</th>
                        <th>Actual site of @Model.NotificationType.ToString().ToLowerInvariant()</th>
                    </tr>
                </thead>
                <tbody>
                    @for (var i = 0; i < Model.Facilities.Count; i++)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(m => m.Facilities[i].Business.Name)
                            </td>
                            <td>
                                @Html.DisplayFor(m => m.Facilities[i].Address.StreetOrSuburb),
                                @Html.DisplayFor(m => m.Facilities[i].Address.TownOrCity)
                            </td>
                            <td>
                                @{
                        var htmlAttr = new Dictionary<string, object> { { "id", Html.NameFor(m => m.Facilities[i].Id) } };
                        htmlAttr.Add("title", "Actual site of treatment?");
                        if (@Model.Facilities[i].IsActualSiteOfTreatment)
                        {
                            htmlAttr.Add("checked", "checked");
                        }
                        @Html.RadioButtonFor(m => m.SelectedSiteOfTreatment, Model.Facilities[i].Id, htmlAttr)
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

        </div>

        <button class="button" type="submit">@EA.Iws.Web.Infrastructure.Constants.ContinueButtonText</button>
    }
}
else
{
    <p>You have not added any facilities to this notification. Please add a facility before selecting the site the waste will be finally @(Model.NotificationType == NotificationType.Recovery ? "recovered" : "disposed").</p>
    <p>@Html.ActionLink("Back to facilities", "List", "Facility", new { id = Model.NotificationId, backToOverview = ViewBag.BackToOverview }, null)</p>
    if (ViewBag.BackToOverview)
    {
        @Html.ActionLink(@EA.Iws.Web.Infrastructure.Constants.ContinueButtonText, "Index", "Home", new { id = Model.NotificationId }, new { @class = "button" })
    }
    else
    {
        if (Model.NotificationType == NotificationType.Recovery)
        {
            @Html.ActionLink(@EA.Iws.Web.Infrastructure.Constants.ContinueButtonText, "RecoveryPreconsent", "Facility", new { id = Model.NotificationId }, new { @class = "button" })
        }
        else
        {
            @Html.ActionLink(@EA.Iws.Web.Infrastructure.Constants.ContinueButtonText, "OperationCodes", "WasteOperations", new { id = Model.NotificationId }, new { @class = "button" })
        }
    }
}