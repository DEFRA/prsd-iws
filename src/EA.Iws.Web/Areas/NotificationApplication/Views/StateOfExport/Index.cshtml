@model EA.Iws.Web.Areas.NotificationApplication.ViewModels.StateOfExport.StateOfExportViewModel
@{
    ViewBag.Title = "State Of Export";
}
<h1 class="heading-large">Where is the waste being exported from?</h1>

@using (Html.BeginForm())
{

    @Html.Gds().ValidationSummary()
    @Html.AntiForgeryToken()


    <div class="form-group">
        <h2 class="heading-small">Competent Authority</h2>
        @Model.CompetentAuthorityName
    </div>

    <div class="form-group @Html.Gds().FormGroupClass(m => m.EntryOrExitPointId)">
        @Html.Gds().LabelFor(m => m.EntryOrExitPointId, new { @class = "form-label-bold" })
        @Html.Gds().HintParagraph("Enter the specific port or border crossing from which your waste will be leaving the UK")
        @Html.Gds().ValidationMessageFor(m => m.EntryOrExitPointId)
        @Html.Gds().DropDownListFor(m => m.EntryOrExitPointId, Model.ExitPoints, string.Empty, new { @title="Exit point"})
    </div>

    <div class="form-group">
        <button class="button" type="submit" value="submit" name="submit">@Constants.ContinueButtonText</button>
    </div>

        @section scripts{
            <script>
                (function($) {
                    $(function() {
                        $('#EntryOrExitPointId').selectToAutocomplete();
                    });
                })(jQuery);
            </script>

        }
    
    @Html.HiddenFor(m => m.CompetentAuthorityName)
    @Html.HiddenFor(m => m.CountryId)

    for (int i = 0; i < Model.TransitStateCountryIds.Count; i++)
    {
        @Html.HiddenFor(m => m.TransitStateCountryIds[i])
    }
    if (Model.StateOfImportCountryId.HasValue)
    {
        @Html.HiddenFor(m => m.StateOfImportCountryId)
    }
}