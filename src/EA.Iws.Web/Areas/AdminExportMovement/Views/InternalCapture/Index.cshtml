@model EA.Iws.Web.Areas.AdminExportMovement.ViewModels.InternalCapture.CaptureViewModel
@using Resource = EA.Iws.Web.Areas.AdminExportMovement.Views.InternalCapture.IndexResources

@{
    ViewBag.Title = Resource.Title;
}

<h1 class="heading-large">@Resource.MainHeading</h1>

<p>@Html.Raw(string.Format(Resource.CurrentlyDisplaying, Model.MovementNumber))</p>

<table>
    <thead>
        <tr>
            <th>@Resource.TableDateHeader</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@Resource.PrenotificationDateRow</td>
            <td>
                @if (Model.PrenotificationDate.HasValue)
                {
                    @Html.Gds().DisplayDate(Model.PrenotificationDate.Value)
                }
                else
                {
                    <text>@Resource.PrenotificationDateNotSet</text>
                }
            </td>
        </tr>
        <tr>
            <td>@Resource.ActualDateRow</td>
            <td>@Html.Gds().DisplayDate(Model.ActualDate)</td>
        </tr>
    </tbody>
</table>

@using (Html.BeginForm())
    {
         @Html.Gds().ValidationSummary()
         @Html.AntiForgeryToken()

         @Html.HiddenFor(m => m.MovementNumber)
         @Html.HiddenFor(m => m.ActualDate)
         @Html.HiddenFor(m => m.PrenotificationDate)
         @Html.HiddenFor(m => m.IsReceived)
         @Html.HiddenFor(m => m.IsOperationCompleted)
         @Html.HiddenFor(m => m.NotificationId)
         @Html.HiddenFor(m => m.NotificationType)

        if (Model.ShowReceiptDataAsReadOnly())
        {
            @Html.HiddenFor(m => m.Receipt.ReceivedDate.Day)
            @Html.HiddenFor(m => m.Receipt.ReceivedDate.Month)
            @Html.HiddenFor(m => m.Receipt.ReceivedDate.Year)
            @Html.HiddenFor(m => m.Receipt.ActualQuantity)
            @Html.HiddenFor(m => m.Receipt.Units)
            <p>
                <div class="heading-small">@Html.LabelFor(m => m.Receipt.ReceivedDate)</div>
                @Html.Gds().DisplayDate(Model.Receipt.ReceivedDate.AsDateTime().GetValueOrDefault())
            </p>
            <p>
                <div class="heading-small">@Resource.AcceptedTitle</div>
                @if (Model.Receipt.WasShipmentAccepted)
                {
                    @Resource.ShipmentWasAccepted
                }
                else
                {
                    @Resource.ShipmentWasNotAccepted
                }
            </p>
            <p>
                <div class="heading-small">@Html.LabelFor(m => m.Receipt.ActualQuantity)</div>
                @Model.Receipt.ActualQuantity.GetValueOrDefault().ToString("G29")  @Model.Receipt.Units
            </p>
        }
        else
        {
            @Html.EditorFor(m => m.Receipt)
        }

        if (Model.ShowRecoveryDataAsReadOnly())
        {
            @Html.HiddenFor(m => m.Recovery.RecoveryDate.Day)
            @Html.HiddenFor(m => m.Recovery.RecoveryDate.Month)
            @Html.HiddenFor(m => m.Recovery.RecoveryDate.Year)
            <p>
                <div class="heading-small">@Resource.RecoveryTitle</div>
                @Html.Gds().DisplayDate(Model.Recovery.RecoveryDate.AsDateTime().GetValueOrDefault())
            </p>
        }
        else
        {
            @Html.EditorFor(m => m.Recovery)
        }

        if (!Model.ShowReceiptAndRecoveryAsReadOnly())
        {
            <button class="button" type="submit">@Constants.ContinueButtonText</button>
        }
     }


@Html.ActionLink(Resource.ReturnToSummary, "Index", "Home", new { area = "AdminExportNotificationMovements", id = Model.NotificationId }, null)