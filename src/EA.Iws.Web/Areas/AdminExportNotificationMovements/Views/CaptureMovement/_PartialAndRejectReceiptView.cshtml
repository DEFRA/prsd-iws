@model EA.Iws.Web.Areas.AdminExportNotificationMovements.ViewModels.CaptureMovement.ReceiptViewModel
@using Resource = EA.Iws.Web.Areas.AdminExportNotificationMovements.Views.Shared.EditorTemplates.ReceiptResources
@using Resources = EA.Iws.Web.Areas.AdminImportNotificationMovements.ViewModels.Capture.ReceiptViewModelResources

<div class="form-group">
    @Html.LabelFor(m => m.RejectionReason, new { @class = "form-label-bold" })
    @Resources.PartiallyRejectionReasonInfomationLabel1
    <br />
    @Resources.PartiallyRejectionReasonInfomationLabel2

    @Html.Gds().ValidationMessageFor(m => m.RejectionReason)
    @Html.TextAreaFor(m => m.RejectionReason, new { @class = "form-control-wide", rows = 10 })
</div>

<div class="form-group">
    @Html.LabelFor(m => m.ShipmentRejectedQuantity, new { @class = "form-label-bold" })
    @Html.Gds().ValidationMessageFor(m => m.ShipmentRejectedQuantity)
    <p>
        @Html.LabelFor(m => m.RejectedQuantityInfo, new { @class = "form-label" })
    </p>

    @Html.LabelFor(m => m.RejectedQuantity, new { @class = "form-label" })
    @Html.Gds().ValidationMessageFor(m => m.RejectedQuantity)
    @Html.Gds().ValidationMessageFor(m => m.RejectedUnits)

    <div class="grid-row">
        <div class="column-third">
            @Html.Gds().TextBoxFor(m => m.RejectedQuantity, new { type = "number", min = 0, step = "any", @class = "form-control form-control-wide" })
        </div>
        <div class="column-third">
            @Html.Gds().DropDownListFor(m => m.RejectedUnits, Model.UnitSelectList, new { @class = "form-control form-control-wide" })
            @for (int i = 0; i < Model.PossibleUnits.Count; i++)
            {
                @Html.HiddenFor(m => m.PossibleUnits[i])
            }
        </div>
    </div>
</div>

@if (Model.ShipmentTypes == ShipmentType.Partially)
{
    <div class="form-group" id="dvActualQty">
        <h3 class="heading-small" style="margin-top: 0">@Resource.ActualQuantityQuestion</h3>
        <p>@Resource.ActualQuantityHint</p>
        @Html.LabelFor(m => m.ActualQuantity, new { @class = "form-label" })
        @Html.Gds().ValidationMessageFor(m => m.ActualQuantity)
        @Html.Gds().ValidationMessageFor(m => m.ActualUnits)
        <div class="grid-row">
            <div class="column-third">
                @Html.Gds().TextBoxFor(m => m.ActualQuantity, new { type = "number", min = 0, step = "any", @class = "form-control form-control-wide" })
            </div>
            <div class="column-third">
                @Html.Gds().DropDownListFor(m => m.ActualUnits, Model.UnitSelectList, new { @class = "form-control form-control-wide" })
                @for (int i = 0; i < Model.PossibleUnits.Count; i++)
                {
                    @Html.HiddenFor(m => m.PossibleUnits[i])
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="form-group" id="dvActualQty" style="display:none">
        <h3 class="heading-small" style="margin-top: 0">@Resource.ActualQuantityQuestion</h3>
        <p>@Resource.ActualQuantityHint</p>
        @Html.LabelFor(m => m.ActualQuantity, new { @class = "form-label" })
        @Html.Gds().ValidationMessageFor(m => m.ActualQuantity)
        @Html.Gds().ValidationMessageFor(m => m.ActualUnits)
        <div class="grid-row">
            <div class="column-third">
                @Html.Gds().TextBoxFor(m => m.ActualQuantity, new { type = "number", min = 0, step = "any", @class = "form-control form-control-wide" })
            </div>
            <div class="column-third">
                @Html.Gds().DropDownListFor(m => m.ActualUnits, Model.UnitSelectList, new { @class = "form-control form-control-wide" })
                @for (int i = 0; i < Model.PossibleUnits.Count; i++)
                {
                    @Html.HiddenFor(m => m.PossibleUnits[i])
                }
            </div>
        </div>
    </div>
}
