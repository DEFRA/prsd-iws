@using Resource = EA.Iws.Web.Areas.AdminExportNotificationMovements.Views.CaptureMovement.CreateResources
@model EA.Iws.Web.Areas.AdminExportNotificationMovements.ViewModels.CaptureMovement.CreateViewModel

@{
    ViewBag.Title = Resource.PageTitle;
}

<div class="grid-row">
    <div class="column-two-thirds">
        <h1 class="heading-large">@Resource.MainHeading</h1>

       @using (Html.BeginForm())
       {
        @Html.AntiForgeryToken()
        @Html.Gds().ValidationSummary()
        @Html.HiddenFor(m => m.LatestCurrentMovementNumber)
        @Html.HiddenFor(m => m.NotificationId)
        @Html.HiddenFor(m => m.NotificationType)
           if (ViewData.ModelState.IsValid && Model.Number != null)
           {
        <h1 class="data-item bold-xxlarge">@string.Format(Resource.ShipmentNumber, Model.Number)</h1>
        }
        
                    <div class="form-group @Html.Gds().FormGroupClass(m => m.Number)">
                        @Html.Gds().LabelFor(m => m.Number)
                        @if (Model.LatestCurrentMovementNumber == 0)
                        {
                            @Resource.ZeroMovements
                        }
                        else
                        {
                            @Html.Raw(string.Format(Resource.LatestNumber, Model.LatestCurrentMovementNumber))
                        }
                        @Html.Gds().ValidationMessageFor(m => m.Number)
                        @Html.Gds().TextBoxFor(m => m.Number, new { type = "number", min = 1 })
                    </div>
               
                    @Html.Partial("_Prenotify")
        <hr class="hrline" />

                    @Html.EditorFor(m => m.Receipt)

       <hr class="hrline"/>

                    @Html.EditorFor(m => m.Recovery)
         <hr class="hrline"/>         
              
            <button class="button" type="submit">@Constants.ContinueButtonText</button>
          
       }
    </div>
</div>
@Html.ActionLink(Resource.ReturnToSummary, "Index", "Home", new { area = "AdminExportNotificationMovements", id = Model.NotificationId }, null)




@section scripts {
    <script>
        var prenotificationDateSelector = $("#PrenotificationDate_Day, #PrenotificationDate_Month, #PrenotificationDate_Year");

        function togglePrenotificationDate(checked) {
            if (checked) {
                prenotificationDateSelector
                    .val('')
                    .attr('readonly', true)
                    .css('background-color', '#DEDEDE')
                    .css('color', 'gray');
            } else {
                prenotificationDateSelector
                    .attr('readonly', false)
                    .css('background-color', 'white')
                    .css('color', 'black');
            }
        }

        togglePrenotificationDate($('#HasNoPrenotification').is(':checked'));

        $(function () {
            $("#HasNoPrenotification").click(function () {
                togglePrenotificationDate($('#HasNoPrenotification').is(':checked'));
            });
        });
    </script>
}