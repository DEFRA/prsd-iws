@model EA.Iws.Web.Areas.AdminExportNotificationMovements.ViewModels.MovementOverride.IndexViewModel
@using Resource = EA.Iws.Web.Areas.AdminExportNotificationMovements.Views.MovementOverride.IndexResources
@using EA.Iws.Core.Shared

@{
    ViewBag.Title = Resource.Title;
}

<div class="grid-row container">
    <div class="stickem-row stickem-container">
        <div class="column-two-thirds">

            <h1 class="govuk-heading-l">@Resource.MainHeading</h1>
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.Gds().ValidationSummary()
                @Html.HiddenFor(m => m.NotificationType)
                @Html.HiddenFor(m => m.ShipmentNumber)
                @Html.HiddenFor(m => m.HasNoPrenotification)
                @Html.HiddenFor(m => m.WasShipmentAccepted)
                @Html.HiddenFor(m => m.IsReceived)
                @Html.HiddenFor(m => m.IsOperationCompleted)
                @Html.HiddenFor(m => m.IsRejected)
                @Html.HiddenFor(m => m.IsPartiallyRejected)
                var operationLabelVerb = Model.NotificationType == NotificationType.Recovery ? "recovered" : "disposed of";
                var operationTitleVerb = Model.NotificationType == NotificationType.Recovery ? "Recovered" : "Disposed";

                <h1 class="data-item bold-xlarge">@string.Format(Resource.ShipmentNumber, Model.ShipmentNumber)</h1>

                if (Model.HasNoPrenotification)
                {
                    <div class="govuk-form-group">
                        <h3 class="heading-small">@Html.DisplayNameFor(m => m.PrenotificationDate)</h3>
                        Has no prenotification
                    </div>
                }
                else
                {
                    <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.PrenotificationDate) @Html.Gds().FormGroupClass(m => m.HasNoPrenotification)">
                        @Html.LabelFor(m => m.PrenotificationDate, new { @class = "form-label-bold" })
                        @Html.Gds().ValidationMessageFor(m => m.PrenotificationDate)
                        @Html.Gds().TextBoxFor(m => m.PrenotificationDate, new { data_datable = "ddmmyy", @class = "form-control-narrow", @Value = Model.PrenotificationDate.HasValue ? Model.PrenotificationDate.Value.ToString("dd/MM/yy") : Model.PrenotificationDate.ToString() })
                    </div>

                    <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.HasNoPrenotification)">
                        <fieldset>
                            <div>@Html.Gds().ValidationMessageFor(m => m.HasNoPrenotification)</div>
                            <div class="multiple-choice">
                                @Html.CheckBoxFor(m => m.HasNoPrenotification)
                                <label for="@Html.NameFor(m => m.HasNoPrenotification)">
                                    @Html.DisplayNameFor(m => m.HasNoPrenotification)
                                </label>
                            </div>
                        </fieldset>
                    </div>
                }

                <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.ActualShipmentDate)">
                    @Html.LabelFor(m => m.ActualShipmentDate, new { @class = "form-label-bold" })
                    @Html.Gds().ValidationMessageFor(m => m.ActualShipmentDate)
                    @Html.Gds().TextBoxFor(m => m.ActualShipmentDate, new { data_datable = "ddmmyy", @class = "form-control-narrow", @Value = Model.ActualShipmentDate.HasValue ? Model.ActualShipmentDate.Value.ToString("dd/MM/yy") : Model.ActualShipmentDate.ToString() })
                </div>
                <hr />
                if (Model.IsReceived || Model.IsRejected || Model.IsPartiallyRejected)
                {
                    <div>
                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.ReceivedDate)">
                            @Html.LabelFor(m => m.ReceivedDate, new { @class = "form-label-bold" })
                            @Html.Gds().ValidationMessageFor(m => m.ReceivedDate)
                            @Html.Gds().TextBoxFor(m => m.ReceivedDate, new { data_datable = "ddmmyy", @class = "form-control-narrow", @Value = Model.ReceivedDate.HasValue ? Model.ReceivedDate.Value.ToString("dd/MM/yy") : Model.ReceivedDate.ToString() })
                        </div>

                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.WasShipmentAccepted)">
                            @Html.LabelFor(m => m.WasShipmentAccepted, new { @class = "form-label-bold" })
                            @Html.Gds().ValidationMessageFor(m => m.WasShipmentAccepted)
                            <fieldset class="govuk-fieldset">
                                <div class="govuk-radios" data-module="govuk-radios">
                                    @if (Model.IsReceived)
                                    {
                                        <p>Yes</p>
                                    }
                                    else if (Model.IsRejected)
                                    {
                                        <p>No</p>
                                    }
                                    else if (Model.IsPartiallyRejected)
                                    {
                                        <p>Partially</p>
                                    }
                                    else
                                    {
                                        <div class="govuk-radios__item">
                                            @Html.RadioButtonFor(m => m.WasShipmentAccepted, true, new { id = "yes", @class = "govuk-radios__input" })
                                            <label class="govuk-label govuk-radios__label" for="yes">
                                                Yes
                                            </label>
                                        </div>

                                        <div class="govuk-radios__item" data-target="rejected">
                                            @Html.RadioButtonFor(m => m.WasShipmentAccepted, false, new { id = "partially", @class = "govuk-radios__input" })
                                            <label class="govuk-label govuk-radios__label" for="partially">
                                                Partially
                                            </label>
                                        </div>

                                        <div class="govuk-radios__item" data-target="rejected">
                                            @Html.RadioButtonFor(m => m.WasShipmentAccepted, false, new { id = "no", @class = "govuk-radios__input" })
                                            <label class="govuk-label govuk-radios__label" for="no">
                                                No
                                            </label>
                                        </div>
                                    }
                                    <div class="@(Model.WasShipmentAccepted ? "js-hidden" : string.Empty)" id="rejected">
                                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.RejectionReason)">
                                            @Html.LabelFor(m => m.RejectionReason, new { @class = "form-label-bold" })
                                            @Html.Gds().ValidationMessageFor(m => m.RejectionReason)
                                            @Html.TextAreaFor(m => m.RejectionReason, new { @class = "movement-override", rows = 10 })
                                        </div>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                    </div>
                    if (Model.IsReceived)
                    {
                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.ActualQuantity) @Html.Gds().FormGroupClass(m => m.Units)">
                            <h3 class="heading-small" style="margin-top: 0">@Resource.ActualQuantityQuestion</h3>
                            <p>@Resource.ActualQuantityHint</p>
                            @Html.LabelFor(m => m.ActualQuantity, new { @class = "form-label" })
                            @Html.Gds().ValidationMessageFor(m => m.ActualQuantity)
                            @Html.Gds().ValidationMessageFor(m => m.Units)
                            <div class="grid-row">
                                <div class="column-third">
                                    @Html.Gds().TextBoxFor(m => m.ActualQuantity, new { type = "number", min = 0, step = "any", @class = "form-control form-control-wide" })
                                </div>
                                <div class="column-third">
                                    @Html.Gds().DropDownListFor(m => m.Units, Model.UnitSelectList, new { @class = "form-control form-control-wide" })
                                    @for (int i = 0; i < Model.PossibleUnits.Count; i++)
                                    {
                                        @Html.HiddenFor(m => m.PossibleUnits[i])
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else if (Model.IsRejected)
                    {
                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.RejectedQuantity) @Html.Gds().FormGroupClass(m => m.Units)">
                            <h3 class="heading-small" style="margin-top: 0">@Resource.RejectedQuantityQuestion</h3>
                            <p>@Resource.RejectedQuantityHint</p>
                            @Html.LabelFor(m => m.RejectedQuantity, new { @class = "form-label" })
                            @Html.Gds().ValidationMessageFor(m => m.RejectedQuantity)
                            @Html.Gds().ValidationMessageFor(m => m.RejectedUnits)
                            <div class="grid-row">
                                <div class="column-third">
                                    @Html.Gds().TextBoxFor(m => m.RejectedQuantity, new { type = "number", min = 0, step = "any", @class = "form-control form-control-wide" })
                                </div>
                                <div class="column-third">
                                    @Html.Gds().DropDownListFor(m => m.RejectedUnits, Model.UnitSelectList, new { @class = "form-control form-control-wide" })
                                    @for (int i = 0; i < Model.PossibleUnits.Count; i++)
                                    {
                                        @Html.HiddenFor(m => m.PossibleUnits[i])
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.RejectedQuantity) @Html.Gds().FormGroupClass(m => m.Units)">
                            <h3 class="heading-small" style="margin-top: 0">@Resource.RejectedQuantityQuestion</h3>
                            <p>@Resource.RejectedQuantityHint</p>
                            @Html.LabelFor(m => m.RejectedQuantity, new { @class = "form-label" })
                            @Html.Gds().ValidationMessageFor(m => m.RejectedQuantity)
                            @Html.Gds().ValidationMessageFor(m => m.RejectedUnits)
                            <div class="grid-row">
                                <div class="column-third">
                                    @Html.Gds().TextBoxFor(m => m.RejectedQuantity, new { type = "number", min = 0, step = "any", @class = "form-control form-control-wide" })
                                </div>
                                <div class="column-third">
                                    @Html.Gds().DropDownListFor(m => m.RejectedUnits, Model.UnitSelectList, new { @class = "form-control form-control-wide" })
                                    @for (int i = 0; i < Model.PossibleUnits.Count; i++)
                                    {
                                        @Html.HiddenFor(m => m.PossibleUnits[i])
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.ActualQuantity) @Html.Gds().FormGroupClass(m => m.Units)">
                            <h3 class="heading-small" style="margin-top: 0">@Resource.ActualQuantityQuestion</h3>
                            <p>@Resource.ActualQuantityHint</p>
                            @Html.LabelFor(m => m.ActualQuantity, new { @class = "form-label" })
                            @Html.Gds().ValidationMessageFor(m => m.ActualQuantity)
                            @Html.Gds().ValidationMessageFor(m => m.Units)
                            <div class="grid-row">
                                <div class="column-third">
                                    @Html.Gds().TextBoxFor(m => m.ActualQuantity, new { type = "number", min = 0, step = "any", @class = "form-control form-control-wide" })
                                </div>
                                <div class="column-third">
                                    @Html.Gds().DropDownListFor(m => m.Units, Model.UnitSelectList, new { @class = "form-control form-control-wide" })
                                    @for (int i = 0; i < Model.PossibleUnits.Count; i++)
                                    {
                                        @Html.HiddenFor(m => m.PossibleUnits[i])
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    <hr />
                }
                if (!Model.IsRejected)
                {
                    <div>
                        <div class="govuk-form-group @Html.Gds().FormGroupClass(m => m.Date)">
                            @Html.LabelFor(m => m.Date, string.Format(Resource.RecoveryDate, operationLabelVerb), new { @class = "form-label-bold" })
                            @Html.Gds().ValidationMessageFor(m => m.Date)
                            @Html.Gds().TextBoxFor(m => m.Date, new { data_datable = "ddmmyy", @class = "form-control-narrow", @Value = Model.Date.HasValue ? Model.Date.Value.ToString("dd/MM/yy") : Model.Date.ToString() })
                        </div>
                    </div>
                    <hr />
                }

                @Html.Partial("_ShipmentComments")

                <button class="govuk-button" type="submit">@Constants.ContinueButtonText</button>

            }
        </div>

        @Html.Partial("_ChangeShipment")
    </div>
</div>

@section scripts {

    <script>
        var prenotificationDateSelector = $("#PrenotificationDate");

        function togglePrenotificationDate(checked) {
            if (checked) {
                prenotificationDateSelector
                    .val('')
                    .attr('readonly', true)
                    .css('background-color', '#DEDEDE')
                    .css('color', 'gray');
            } else {
                prenotificationDateSelector
                    .attr('readonly', false)
                    .css('background-color', 'white')
                    .css('color', 'black');
            }
        }
        togglePrenotificationDate($('#HasNoPrenotification').is(':checked'));

        $(function () {
            $("#HasNoPrenotification").click(function () {
                togglePrenotificationDate($('#HasNoPrenotification').is(':checked'));
            });

            $('.container').stickem();
        });
    </script>

}
