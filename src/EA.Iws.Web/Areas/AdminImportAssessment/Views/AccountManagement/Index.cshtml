@using EA.Iws.Core.NotificationAssessment
@using EA.Iws.Core.Shared
@using EnumHelper = EA.Prsd.Core.Helpers.EnumHelper
@using Resource = EA.Iws.Web.Areas.AdminImportAssessment.Views.AccountManagement.IndexResources
@model EA.Iws.Web.Areas.AdminImportAssessment.ViewModels.AccountManagement.AccountManagementViewModel

@{
    ViewBag.Title = Resource.MainHeading;
}

<h1 class="heading-large">@Resource.MainHeading</h1>

@Html.Gds().ValidationSummary()

<div class="grid-row">

    <div class="column-one-third">
        <p class="bold-xsmall">@Resource.TotalHeading</p>
    </div>

    <div class="column-one-third">
        <p class="bold-xsmall">@Resource.BalanceHeading</p>
    </div>

    <div class="column-one-third">
        <p class="bold-xsmall">@Resource.RemainingHeading</p>
    </div>

</div>

<div class="grid-row">

    <div class="column-one-third bold-medium">
        @Model.TotalCharge.ToString("C")
    </div>

    <div class="column-one-third bold-medium">
        @Model.TotalPaid.ToString("C")
    </div>

    <div class="column-one-third bold-medium">
        @Model.AmountRemaining.ToString("C")
    </div>

</div>

<hr>

<h2 class="heading-medium">@Resource.HistoryHeading</h2>

<div class="form-group">
    <table title=@Resource.HistoryHeading>
        <thead>
        <tr>
            <th>@Resource.TableHeaderTranaction</th>
            <th>@Resource.TableHeaderDate</th>
            <th>@Resource.TableHeaderAmount</th>
            <th>@Resource.TableHeaderType</th>
            <th>@Resource.TableHeaderReceipt</th>
            <th>@Resource.TableHeaderComments</th>
        </tr>
        </thead>
        <tbody>
        @{
            for (var i = 0; i < Model.Transactions.Count(); i++)
            {
                var trans = Model.Transactions[i].Transaction;

                Enum type;
                if (trans == TransactionType.Refund)
                {
                    type = TransactionType.Refund;
                }
                else
                {
                    type = (PaymentMethod)Model.Transactions[i].Type;
                }

                var comment = string.IsNullOrWhiteSpace(Model.Transactions[i].Comments) ? "No" : "<a href=\"#comment-" + i + "\" onclick='openComments()'>Yes</a>";

                <tr>
                    <td>@trans</td>
                    <td>@Model.Transactions[i].Date.ToString("dd/MM/yyyy")</td>
                    <td>@Model.Transactions[i].Amount.ToString("C")</td>
                    <td>@EnumHelper.GetDescription(type)</td>
                    <td>@Model.Transactions[i].ReceiptNumber</td>
                    <td>@Html.Raw(comment)</td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

<div class="form-group">
    <details id="paymentDetails">

        <summary><span class="summary">@Resource.EnterPaymentHeading</span></summary>

        <div class="panel-border-narrow">
            @Html.Partial("_PaymentDetails", Model.PaymentViewModel)
        </div>

    </details>
</div>

<div class="form-group">
    <details id="refundDetails">

        <summary><span class="summary">@Resource.EnterRefundHeading</span></summary>

        <div class="panel-border-narrow">
            @Html.Partial("_RefundDetails", Model.RefundViewModel)
        </div>

    </details>
</div>

@using (Html.BeginForm("EditComment", "AccountManagement", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        <details id="comments" role="group">

            <summary role="button"><span class="summary">@Resource.CommentSectionHeading</span></summary>

            <div class="panel-border-narrow">
                <table>
                    <thead>
                        <tr>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>

                        @for (var i = 0; i < Model.Transactions.Count(); i++)
                        {

                            if (!string.IsNullOrWhiteSpace(Model.Transactions[i].Comments))
                            {
                                var trans = (TransactionType)Model.Transactions[i].Transaction;
                                var commentId = "id=comment-" + i;
                                var editId = "id=edit-" + i;
                                var comment = Model.Transactions[i].Comments;
                                <tr>
                                    <td class="nav-bloc">
                                        <span>@trans&nbsp;&nbsp;&nbsp;@Model.Transactions[i].Date.ToString("dd/MM/yyyy")</span>
                                        <div @commentId class="">
                                            <p>
                                                @Model.Transactions[i].Comments
                                            </p>
                                            <p>
                                                <a href="#comment" + @i onclick='editComment(@i, @Model.Transactions.Count())'>Edit</a>
                                            </p>
                                        </div>
                                        <div @editId class="hidden">
                                            <div>
                                                @Html.TextAreaFor(m => m.Transactions[i].Comments, new { @MaxLength = 500, @display = "block", @style = "width: 50%; height: 100px", @class = "form-control" })
                                                @Html.HiddenFor(m => m.Transactions[i].TransactionId)
                                            </div>
                                            <div>
                                                <button class="link-submit" type="submit" name="commentId" value="@i">Save</button>
                                                &nbsp;&nbsp;&nbsp;
                                                <button class="link-submit" type="submit">Cancel</button>
                                                @*this code is for canceling the edit client side, but the view model data overrides the value. Look at later
                                                    <a href="#cancel-" + @i onclick='cancelComment(@i, @Model.TableData.Count())'>Cancel</a>*@
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }

                        }
                    </tbody>
                </table>
            </div>

        </details>
    </div>
}


@*<div class="form-group">
    <details role="group" id="comments">

        <summary role="button"><span class="summary">@Resource.CommentSectionHeading</span></summary>

        <div class="panel-border-narrow">

            @for (var i = 0; i < Model.Transactions.Count(); i++)
            {
                if (!string.IsNullOrWhiteSpace(Model.Transactions[i].Comments))
                {
                    var trans = (TransactionType)Model.Transactions[i].Transaction;
                    var commentId = "id=comment-" + i;

                    <span>@trans&nbsp;&nbsp;&nbsp;@Model.Transactions[i].Date.ToString("dd/MM/yyyy")</span>

                    <p @commentId>@Model.Transactions[i].Comments</p>
                }
            }
        </div>

    </details>
</div>*@

<div class="form-group">
    @if (Model.CanDeleteTransaction && Model.HasPayments)
    {
        @Html.ActionLink(Resource.DeleteTransaction, "Index", "DeleteTransaction")
    }
</div>

@Html.ActionLink(Resource.KeyDatesLinkText, "Index", "Keydates")

@section menu {
    @Html.Action("ImportNavigation", "Menu", new { area = "Admin", section = ImportNavigationSection.Finance })
}

@section scripts
{
    <script>
        $comments = $("#comments");

        $(function ()
        {
            var showPayment = @Model.ShowPaymentDetails.ToString().ToLower();
            if (showPayment) { $("#paymentDetails").attr("open", "open"); }

            var showRefund = @Model.ShowRefundDetails.ToString().ToLower();
            if (showRefund) { $("#refundDetails").attr("open", "open"); }
            checkPaymentMethod();
        });

        $('#PaymentMethod').change(function () {
            checkPaymentMethod();
        });

        function checkPaymentMethod()
        {
            if ($('#PaymentMethod option:selected').text() === 'Cheque') {
                $('#receiptArea').show();
            } else {
                $('#receiptArea').hide();
            }
        }

        function openComments() {
            $comments.attr('open', '');
        }

        function editComment(id, commentCount) {

            resetComments(commentCount);

            var editTextBox = $("#edit-" + id);
            editTextBox.removeClass('hidden');

            var editButton = $("#comment-" + id);
            editButton.addClass('hidden');
        }

        function cancelComment(id, commentCount) {

            resetComments(commentCount);

            var editTextBox = $("#edit-" + id);
            editTextBox.addClass('hidden');

            var editButton = $("#comment-" + id);
            editButton.removeClass('hidden');
        }

        function resetComments(commentCount) {
            // This resets the edit div and comment div back to their original state, so that only 1 comment can be edited at once
            for (i = 0; i < commentCount; i ++) {
                var editTextBox = $("#edit-" + i);
                editTextBox.addClass('hidden');

                var editButton = $("#comment-" + i);
                editButton.removeClass('hidden');
            }
        }
    </script>
}