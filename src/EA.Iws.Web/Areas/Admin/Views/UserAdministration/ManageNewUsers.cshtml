@using EA.Iws.Core.Admin
@using EA.Iws.Core.Authorization
@model EA.Iws.Web.Areas.Admin.ViewModels.UserAdministration.NewUsersListViewModel
@{
    ViewBag.Title = "Manage users";
    var usersNoun = Model.Users.Count != 1 ? "users" : "user";
}

<h1 class="govuk-heading-l">Manage new users</h1>

<p>Displaying @Model.Users.Count @usersNoun</p>

<hr />

@using (Html.BeginForm())
{
    @Html.Gds().ValidationSummary()
    @Html.AntiForgeryToken()

    <table class="govuk-table" title="Manage new users">
        <thead class="govuk-table__head">
            <tr class="govuk-table__row">
                <th scope="col" class="govuk-table__header">Name</th>
                <th scope="col" class="govuk-table__header">Action</th>
                <th scope="col" class="govuk-table__header"></th>
                <th scope="col" class="govuk-table__header">Assign role</th>
            </tr>
        </thead>
        <tbody class="govuk-table__body">
            @for (int i = 0; i < Model.Users.Count; i++)
            {
                <tr class="govuk-table__row @Html.Gds().FormGroupClass(m => m.Users[i])">
                    <td class="govuk-table__cell" title="@Html.DisplayFor(m => m.Users[i].UserData.Email)">@Html.DisplayFor(m => m.Users[i].UserData.FullName)</td>
                    <td class="govuk-table__cell">
                        @Html.HiddenFor(m => m.Users[i].UserData.Id)
                        @Html.HiddenFor(m => m.Users[i].UserData.Email)
                        @Html.HiddenFor(m => m.Users[i].UserData.FirstName)
                        @Html.HiddenFor(m => m.Users[i].UserData.Surname)
                        @Html.HiddenFor(m => m.Users[i].UserData.CompetentAuthority)
                        @Html.HiddenFor(m => m.Users[i].UserData.JobTitle)
                        @Html.HiddenFor(m => m.Users[i].UserData.PhoneNumber)
                        @Html.HiddenFor(m => m.Users[i].UserData.Status)
                        @Html.Gds().DropDownListFor(m => m.Users[i].Action, Model.ApprovalActionsList, optionLabel: "Pending", htmlAttributes: new { @class = "action-dropdown" })
                    </td>
                    <td class="govuk-table__cell" style="text-align: center;">
                        @if (Model.Users[i].Action == ApprovalAction.Approve)
                        {
                            <i class="fa fa-check-circle status-circle green-text" aria-label="Green Tick"></i>
                        }
                        else if (Model.Users[i].Action == ApprovalAction.Reject)
                        {
                            <i class="fa fa-times-circle status-circle red-text" aria-label="Red Cross"></i>
                        }
                        else
                        {
                            <i class="fa fa-question-circle status-circle grey-text" aria-label="Question Mark Grey"></i>
                        }
                    </td>
                    <td>
                        @if (Model.Users[i].Action == ApprovalAction.Approve)
                        {

                        }
                        else
                        {
                            @Html.Gds().DropDownListFor(m => m.Users[i].AssignedRole, Model.UserRolesList, string.Empty, new { @class = "role-dropdown visually-hidden", disabled = "disabled" })
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="govuk-form-group">
        <button class="govuk-button" type="submit">@Constants.ContinueButtonText</button>
    </div>
}

<style>
    .role-dropdown:disabled {
        background: royalblue;
    }
</style>

@section scripts{
    <script>
        function disableRoleDropdown(roleDropdown) {
            roleDropdown.addClass("visually-hidden");
            roleDropdown.attr("disabled", "disabled");
        }

        $(function () {
            $(".action-dropdown").change(function () {
                var itemToAppend = "<i class='fa fa-question-circle status-circle grey-text' aria-label='Question Mark Grey'></i>";
                var roleBox = $(this).parent().parent().find(".role-dropdown");

                disableRoleDropdown(roleBox);

                if (this.value === "0") {
                    itemToAppend = "<i class='fa fa-times-circle status-circle red-text' aria-label='Red Cross'></i>";
                }
                else if (this.value === "1") {
                    // Approved
                    itemToAppend = "<i class='fa fa-check-circle status-circle green-text' aria-label='Green Tick'></i>";

                    roleBox.removeAttr("disabled");
                    roleBox.removeClass("visually-hidden");
                    roleBox.val("@UserRole.ReadOnly");
                }

                var statusBox = $(this).parent().next();
                statusBox.empty().append(itemToAppend);
            });
        });
    </script>
}

@section menu {
    @Html.Action("HomeNavigation", "Menu", new { area = "Admin", section = AdminHomeNavigationSection.AccountServices })
}