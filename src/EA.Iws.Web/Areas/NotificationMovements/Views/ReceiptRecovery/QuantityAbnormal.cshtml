@using EA.Iws.Core.Movement
@using EnumHelper = EA.Prsd.Core.Helpers.EnumHelper
@using Resource = EA.Iws.Web.Areas.NotificationMovements.Views.ReceiptRecovery.QuantityAbnormalResources
@model EA.Iws.Web.Areas.NotificationMovements.ViewModels.ReceiptRecovery.QuantityAbnormalViewModel
@{
    Layout = "~/Areas/NotificationMovements/Views/Shared/_CreateSummaryLayout.cshtml";
    ViewBag.Title = Resource.Title;
}

@helper DisplayMessage()
{
string message;
switch (Model.Tolerance)
{
    case QuantityReceivedTolerance.BelowTolerance:
        message = Resource.BelowTolerance;
        break;
    case QuantityReceivedTolerance.AboveTolerance:
        message = Resource.AboveTolerance;
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

    <p>@Html.Raw(string.Format(message, string.Format("{0} {1}", Model.Quantity, EnumHelper.GetDisplayName(Model.Unit).ToLower())))</p>
}

<header class="hgroup">
    <h1 class="heading-large">@Resource.MainHeading</h1>
    @DisplayMessage()
</header>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.Gds().ValidationSummary()
    @Html.HiddenFor(m => m.NotificationType)
    @Html.HiddenFor(m => m.Certificate)
    @Html.HiddenFor(m => m.Unit)
    @Html.HiddenFor(m => m.DateReceived)
    @Html.HiddenFor(m => m.Tolerance)
    @Html.HiddenFor(m => m.DateRecovered)
    <div class="form-group @Html.Gds().FormGroupClass(m => m.Quantity)">
        @Html.LabelFor(m => m.IsCorrect, new { @class = "form-label-bold" })
        @Html.Gds().ValidationMessageFor(m => m.IsCorrect)
        <fieldset>
            <div class="multiple-choice">
                @Html.RadioButtonFor(m => m.IsCorrect, true, new { id = "yes" })
                <label for="yes">
                    @Resource.Confirm
                </label>
            </div>

            <div class="multiple-choice" data-target="change-quantity">
                @Html.RadioButtonFor(m => m.IsCorrect, false, new { id = "no" })
                <label for="no">
                    @Resource.Reject
                </label>
            </div>

            <div class="panel @(Model.IsCorrect.GetValueOrDefault(true) ? "js-hidden" : "")" id="change-quantity">
                @Html.LabelFor(m => m.Quantity, string.Format(Resource.QuantityLabel, EnumHelper.GetDisplayName(Model.Unit).ToLower()), new { @class = "form-label" })
                @Html.Gds().ValidationMessageFor(m => m.Quantity)
                @Html.Gds().TextBoxFor(m => m.Quantity)
            </div>
        </fieldset>
    </div>

    <button class="button" type="submit">@Constants.ContinueOnlyButtonText</button>
}