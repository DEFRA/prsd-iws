@using Resource = EA.Iws.Web.Areas.NotificationMovements.Views.Certificate.CertificateShipmentResources
@using EA.Iws.Core.Shared
@model EA.Iws.Web.Areas.NotificationMovements.ViewModels.Certificate.ShipmentViewModel
@{
    Layout = "~/Areas/NotificationMovements/Views/Shared/_CreateSummaryLayout.cshtml";
    ViewBag.Title = "Which shipment?";
}

@{ 
    var titleText = Model.NotificationType == NotificationType.Recovery ? "recovered" : "disposed of";    
    }

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.Gds().ValidationSummary()
    @Html.HiddenFor(m => m.NotificationId)
    @Html.HiddenFor(m => m.NotificationType)
    @Html.HiddenFor(m => m.Certificate)

    if (Model.Certificate == CertificateType.Receipt || Model.Certificate == CertificateType.ReceiptRecovery)
    {
        <h1 class="heading-large">@Html.Raw(string.Format(@Resource.MainTitle, (Model.Certificate == CertificateType.ReceiptRecovery ? "received and " + titleText : "received")))</h1>

        if (Model.ReceiveShipments == null || Model.ReceiveShipments.Count() == 0)
        {
            <p>You currently have no active shipments to record as received.</p>

            @Html.ActionLink("Continue",
            "Index",
            "Options",
            new { area = "NotificationApplication", id = Model.NotificationId },
            new { @class = "button" })
        }
        else
        {

            <div class="form-group @Html.Gds().FormGroupClass(m => m.ReceiveShipments)">
                <fieldset>
                    <h2 class="heading-small">@Resource.ReceiveTitle</h2>

                    @for (int i = 0; i < Model.ReceiveShipments.Count(); i++)
                    {
                        <div class="multiple-choice">
                            @Html.HiddenFor(m => m.ReceiveShipments[i].Id)
                            @Html.HiddenFor(m => m.ReceiveShipments[i].DisplayName)
                            @Html.CheckBoxFor(m => m.ReceiveShipments[i].IsSelected)
                            <label for="@Html.IdFor(m => m.ReceiveShipments[i].IsSelected)">@Model.ReceiveShipments[i].DisplayName</label>
                        </div>
                    }
                </fieldset>
            </div>
        }
    }
    else if (Model.Certificate == CertificateType.Recovery)
    {
        <h1 class="heading-large">@Html.Raw(string.Format(@Resource.MainTitle, titleText))</h1>

        if (Model.RecoveryShipments == null || Model.RecoveryShipments.Count() == 0)
        {
            <p>You have no active shipments with a recorded certificate of receipt.</p>

            @Html.ActionLink("Continue",
            "Index",
            "Options",
            new { area = "NotificationApplication", id = Model.NotificationId },
            new { @class = "button" })
        }
        else
        {

            <div class="form-group @Html.Gds().FormGroupClass(m => m.RecoveryShipments)">
                <fieldset>
                    <p class="heading-small">@Resource.RecoveryShipmentTitle</p>

                    @for (int i = 0; i < Model.RecoveryShipments.Count(); i++)
                    {
                        <div class="multiple-choice">
                            @Html.HiddenFor(m => m.RecoveryShipments[i].Id)
                            @Html.HiddenFor(m => m.RecoveryShipments[i].DisplayName)
                            @Html.CheckBoxFor(m => m.RecoveryShipments[i].IsSelected)
                            <label for="@Html.IdFor(m => m.RecoveryShipments[i].IsSelected)">@Model.RecoveryShipments[i].DisplayName</label>
                        </div>
                    }
                </fieldset>
            </div>
        }
    }
    if ((Model.ReceiveShipments != null && Model.ReceiveShipments.Count() > 0) || (Model.RecoveryShipments != null && Model.RecoveryShipments.Count() > 0))
    {
        <div class="form-group-compound">
            <button class="button" type="submit">Continue</button>
        </div>

        @Html.ActionLink("Go to notification options",
                 "Index",
                 "Options",
                 new { area = "NotificationApplication", id = Model.NotificationId },
                 null)
    }
}
