@using EA.Iws.Core.NotificationAssessment
@using Resources = EA.Iws.Web.Areas.AdminExportAssessment.Views.MarkAsInterim.IndexResources
@model EA.Iws.Web.Areas.AdminExportAssessment.ViewModels.MarkAsInterimViewModel
@{
    ViewBag.Title = "Is this an interim notification?";
}

<h1 class="heading-large">Is this an interim notification?</h1>

@if (Model.NotificationStatus == NotificationStatus.InAssessment || (Model.CanUpdateInterimStatus && Model.HasAcceptableStatus))
{
    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.NotificationId)
        @Html.HiddenFor(m => m.NotificationStatus)

        @Html.Gds().ValidationSummary()

        <div class="form-group @Html.Gds().FormGroupClass(m => m.IsInterim)">
            @Html.Gds().ValidationMessageFor(m => m.IsInterim)

            <fieldset>
                <label class="block-label" for="yes">
                    @Html.RadioButtonFor(m => m.IsInterim, true, new { id = "yes" })
                    Yes
                </label>
                <label class="block-label" for="no">
                    @Html.RadioButtonFor(m => m.IsInterim, false, new { id = "no" })
                    No
                </label>
            </fieldset>
        </div>

        <button type="submit" class="button">@Constants.ContinueButtonText</button>
    }
}
else
{
    if (Model.IsInterim.HasValue)
    {
        if (Model.IsInterim.Value)
        {
            <p>The notification is marked as interim</p>
        }
        else
        {
            <p>The notification is marked as non-interim</p>
        }
    }
    else
    {
        <p>Can't set as interim unless the notification is "in assessment"</p>
    }
}

@if (Model.CanUpdateInterimStatus && !Model.HasAcceptableStatus)
{
    <p>@Resources.ThisStatus @EA.Prsd.Core.Helpers.EnumHelper.GetDisplayName(Model.NotificationStatus)</p>
    <div>
        @Resources.StatusErrorMessage
        <ul class="list list-bullet">
            <li>@EA.Prsd.Core.Helpers.EnumHelper.GetDisplayName(NotificationStatus.InAssessment)</li>
            <li>@EA.Prsd.Core.Helpers.EnumHelper.GetDisplayName(NotificationStatus.ReadyToTransmit)</li>
            <li>@EA.Prsd.Core.Helpers.EnumHelper.GetDisplayName(NotificationStatus.Transmitted)</li>
            <li>or @EA.Prsd.Core.Helpers.EnumHelper.GetDisplayName(NotificationStatus.DecisionRequiredBy)</li>
        </ul>
    </div>
}

@section menu {
    @Html.Action("ExportNavigation", "Menu", new { area = "Admin", section = ExportNavigationSection.Assessment })
}