@using EA.Iws.Web.Areas.NotificationAssessment.ViewModels
@model DateInputViewModel

<h1 class="heading-large">Enter the key dates for this notification</h1>

@{
    var nullMarker = "- -";
    var byText = " by ";
}
    
    <div>
        These are the dates so far:

        <table title="Assessment dates currently recorded">
            <tr>
                <th>Activities</th>
                <th>Dates</th>
                <th>Action</th>
            </tr>
            <tr>
                <td>@Html.DisplayNameFor(m => m.NotificationReceivedDate)</td>
                <td>
                    @if (Model.NotificationReceivedDate.IsCompleted)
                    {
                        @Html.Gds().DisplayDateFor(m => m.NotificationReceivedDate.AsDateTime().GetValueOrDefault())
                    }
                    else
                    {
                        @nullMarker
                    }
                </td>
                <td>
                    @(Model.NotificationReceivedDate.IsCompleted ? Html.ActionLink("Edit", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationReceived }, null)
                                  : Html.ActionLink("Add", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationReceived }, null))
                </td>
            </tr>

            <tr>
                <td>Payment received</td>
                <td>
                    @if (Model.PaymentReceivedDate.IsCompleted)
                    {
                        @Html.Gds().DisplayDateFor(m => m.PaymentReceivedDate.AsDateTime().GetValueOrDefault())
                    }
                    else
                    {
                        @nullMarker
                    }
                </td>
                <td>
                    @if (Model.NotificationReceivedDate.IsCompleted)
                    {
                        @(Model.PaymentReceivedDate.IsCompleted ? Html.ActionLink("Edit", "Index", "KeyDates", new { command = KeyDatesStatusEnum.PaymentReceived }, null)
                                  : Html.ActionLink("Add", "Index", "KeyDates", new { command = KeyDatesStatusEnum.PaymentReceived }, null))
                    }
                </td>

            </tr>

            <tr>
                <td>Assessment started</td>
                <td>
                    @if (Model.CommencementDate.IsCompleted)
                    {
                        @Html.Gds().DisplayDateFor(m => m.CommencementDate.AsDateTime().GetValueOrDefault())
                        @byText
                        @Html.DisplayFor(m => m.NameOfOfficer)
                    }
                    else
                    {
                        @nullMarker
                    }
                </td>
                <td>
                    @if (Model.PaymentReceivedDate.IsCompleted)
                    {
                        @(Model.CommencementDate.IsCompleted ? Html.ActionLink("Edit", "Index", "KeyDates", new { command = KeyDatesStatusEnum.AssessmentCommenced }, null)
                                  : Html.ActionLink("Add", "Index", "KeyDates", new { command = KeyDatesStatusEnum.AssessmentCommenced }, null))
                    }
                </td>

            </tr>

            <tr>
                <td>Date application complete</td>
                <td>
                    @if (Model.NotificationCompleteDate.IsCompleted)
                    {
                        @Html.Gds().DisplayDateFor(m => m.NotificationCompleteDate.AsDateTime().GetValueOrDefault())
                    }
                    else
                    {
                        @nullMarker
                    }
                </td>
                <td>
                    @if (Model.CommencementDate.IsCompleted)
                    {
                        @(Model.NotificationCompleteDate.IsCompleted ? Html.ActionLink("Edit", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationComplete }, null)
                                  : Html.ActionLink("Add", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationComplete }, null))
                    }
                </td>

            </tr>

            <tr>
                <td>Transmitted on</td>
                <td>
                    @if (Model.NotificationTransmittedDate.IsCompleted)
                    {
                        @Html.Gds().DisplayDateFor(m => m.NotificationTransmittedDate.AsDateTime().GetValueOrDefault())
                    }
                    else
                    {
                        @nullMarker
                    }
                </td>
                <td>
                    @if (Model.NotificationCompleteDate.IsCompleted)
                    {
                        @(Model.NotificationTransmittedDate.IsCompleted ? Html.ActionLink("Edit", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationTransmitted }, null)
                                  : Html.ActionLink("Add", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationTransmitted }, null))
                    }
                </td>

            </tr>

            <tr>
                <td>Acknowledged on</td>
                <td>
                    @if (Model.NotificationAcknowledgedDate.IsCompleted)
                    {
                        @Html.Gds().DisplayDateFor(m => m.NotificationAcknowledgedDate.AsDateTime().GetValueOrDefault())
                    }
                    else
                    {
                        @nullMarker
                    }
                </td>
                <td>
                    @if (Model.NotificationTransmittedDate.IsCompleted)
                    {
                        @(Model.NotificationAcknowledgedDate.IsCompleted ? Html.ActionLink("Edit", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationAcknowledged }, null)
                                  : Html.ActionLink("Add", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationAcknowledged }, null))
                    }
                </td>

            </tr>

            <tr>
                <td>Decision required by</td>
                <td>
                    @if (Model.DecisionDate.IsCompleted)
                    {
                        @Html.Gds().DisplayDateFor(m => m.DecisionDate.AsDateTime().GetValueOrDefault())
                    }
                    else
                    {
                        @nullMarker
                    }
                </td>
                <td>
                    @if (Model.NotificationAcknowledgedDate.IsCompleted)
                    {
                        @(Model.DecisionDate.IsCompleted ? Html.ActionLink("Edit", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationDecisionDateEntered }, null)
                                  : Html.ActionLink("Add", "Index", "KeyDates", new { command = KeyDatesStatusEnum.NotificationDecisionDateEntered }, null))
                    }
                </td>

            </tr>

        </table>

    </div>

@if (Model.Command != 0)
{
    using (Html.BeginForm("Index", "KeyDates", FormMethod.Post))
    {
        @Html.Gds().ValidationSummary()
        @Html.HiddenFor(m => m.NotificationId)
        @Html.HiddenFor(m => m.Command)
        @Html.HiddenFor(m => m.NotificationReceivedDate.Day)
        @Html.HiddenFor(m => m.NotificationReceivedDate.Month)
        @Html.HiddenFor(m => m.NotificationReceivedDate.Year)
        @Html.HiddenFor(m => m.PaymentReceivedDate.Day)
        @Html.HiddenFor(m => m.PaymentReceivedDate.Month)
        @Html.HiddenFor(m => m.PaymentReceivedDate.Year)
        @Html.HiddenFor(m => m.CommencementDate.Day)
        @Html.HiddenFor(m => m.CommencementDate.Month)
        @Html.HiddenFor(m => m.CommencementDate.Year)
        @Html.HiddenFor(m => m.NotificationCompleteDate.Day)
        @Html.HiddenFor(m => m.NotificationCompleteDate.Month)
        @Html.HiddenFor(m => m.NotificationCompleteDate.Year)
        @Html.HiddenFor(m => m.NotificationTransmittedDate.Day)
        @Html.HiddenFor(m => m.NotificationTransmittedDate.Month)
        @Html.HiddenFor(m => m.NotificationTransmittedDate.Year)
        @Html.HiddenFor(m => m.NotificationAcknowledgedDate.Day)
        @Html.HiddenFor(m => m.NotificationAcknowledgedDate.Month)
        @Html.HiddenFor(m => m.NotificationAcknowledgedDate.Year)
        @Html.HiddenFor(m => m.DecisionDate.Day)
        @Html.HiddenFor(m => m.DecisionDate.Month)
        @Html.HiddenFor(m => m.DecisionDate.Year)
        
        @Html.AntiForgeryToken()

        <br /><br />
        <fieldset>
            <div class="form-group @Html.Gds().FormGroupClass(m => m.NewDate) @Html.Gds().FormGroupClass(m => m.NewDate.Day) @Html.Gds().FormGroupClass(m => m.NewDate.Month) @Html.Gds().FormGroupClass(m => m.NewDate.Year)">
                @EA.Prsd.Core.Helpers.EnumHelper.GetDisplayName(@Model.Command) date<br>
                @Html.Gds().ValidationMessageFor(m => m.NewDate)
                @Html.Gds().HintParagraph("For example, 31 3 2015")
                @Html.EditorFor(m => m.NewDate)
            </div>
        </fieldset>

        if (Model.Command == KeyDatesStatusEnum.AssessmentCommenced)
        {
            <fieldset>
                <div class="form-group @Html.Gds().FormGroupClass(m => m.NameOfOfficer)">
                    @Html.Gds().LabelFor(m => m.NameOfOfficer, false)
                    @Html.Gds().ValidationMessageFor(m => m.NameOfOfficer)
                    @Html.Gds().TextBoxFor(m => m.NameOfOfficer, new { @Maxlength = 30})
                </div>
            </fieldset>
        }
        else
        {
            @Html.HiddenFor(m => m.NameOfOfficer)
        }


        <br />
        <div class="form-group">
            <input type="submit" class="button" value="Submit date" />
        </div>

    }
    
    @section scripts{
        <script>
            $(function () {
                // On page load with a date input, moves the cursor to the first input box.
                var input = $("form #NewDate_Day");
                
                if (input) {
                    input.focus();
                }                
            });
        </script>
    }
}

