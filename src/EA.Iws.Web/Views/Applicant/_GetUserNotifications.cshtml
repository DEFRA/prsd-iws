@using EA.Iws.Core.NotificationAssessment
@using EA.Iws.Web.Views.Applicant

@model IList<EA.Iws.Requests.Notification.NotificationApplicationSummaryData>

@helper DisplayStatus(NotificationStatus status)
{
    string statusColour;
    switch (status)
    {
        case NotificationStatus.InAssessment:
        case NotificationStatus.ReadyToTransmit:
        case NotificationStatus.Transmitted:
        case NotificationStatus.DecisionRequiredBy:
            statusColour = "s-orange";
            break;

        case NotificationStatus.Consented:
            statusColour = "s-green";
            break;

        case NotificationStatus.Objected:
        case NotificationStatus.Withdrawn:
        case NotificationStatus.ConsentWithdrawn:
            statusColour = "s-red";
            break;

        default:
            statusColour = "s-blue";
            break;
    }
    <span class="statusbox @statusColour">@EA.Prsd.Core.Helpers.EnumHelper.GetDisplayName(status).ToUpperInvariant()</span>
}

@if (ViewBag.Errors != null && ((IEnumerable<string>)ViewBag.Errors).Any())
{
    <p>@GetUserNotificationsResources.ErrorMessage</p>
}
else if (Model.Count == 0)
{
    <p>@GetUserNotificationsResources.MessageNoNotification</p>
}
else
{
    <table class="odd-table" title=@GetUserNotificationsResources.TitleManageNotifications>
        <caption class="visuallyhidden">@GetUserNotificationsResources.TableCaption</caption>
        <thead>
            <tr>
                <th>
                    @GetUserNotificationsResources.ThNotificationNumber
                </th>
                <th>
                    @GetUserNotificationsResources.ThStatus
                </th>
                <th>
                    @GetUserNotificationsResources.ThExporter
                </th>
                <th>
                    @GetUserNotificationsResources.ThImporter
                </th>
                <th>
                    @GetUserNotificationsResources.ThAction
                </th>
            </tr>
        </thead>

        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(m => m[i].NotificationNumber)
                    </td>
                    <td>@DisplayStatus(Model[i].Status)
                    </td>
                    <td>
                        @Model[i].Exporter
                    </td>
                    <td>
                        @Model[i].Importer
                    </td>
                    <td>
                        @Html.ActionLink(linkText: GetUserNotificationsResources.LinkChoose, actionName: "ApprovedNotification", controllerName: "Applicant",
                        routeValues: new { id = Model[i].Id, area = string.Empty }, htmlAttributes: new { @title = Model[i].NotificationNumber })
                    </td>
                </tr>
            }
        </tbody>
    </table>
}